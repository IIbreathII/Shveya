import { Controller, Get, Req, Res, UseGuards } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { AuthGoogleService } from './authGoogle.service';
import { Response } from 'express';
import { ConfigService } from '@nestjs/config';

@Controller('auth/google')
export class AuthGoogleController {
  constructor(
    private authService: AuthGoogleService,
    private configService: ConfigService
  ) {}

  @Get()
  @UseGuards(AuthGuard('google'))
  async googleLogin() {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ Google OAuth
  }

  @Get('callback')
  @UseGuards(AuthGuard('google'))
  async googleAuthRedirect(@Req() req, @Res() res: Response) {
    if (!req.user) {
      return res.status(400).json({ message: 'Google authentication failed' });
    }

    const token = await this.authService.generateJwt(req.user);

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –∏ –∫–ª–∏–µ–Ω—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    const domain = this.configService.get<string>('database.domain') || 'localhost';
    const client = this.configService.get<string>('database.client') || 'client32';
    console.log('üîπ Config in Controller:');

    res.cookie('auth_token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      domain, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
      sameSite: process.env.NODE_ENV === 'production' ? 'none' : 'lax',
      path: '/',
      maxAge: 3600000, // 1 —á–∞—Å
    });

    // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º
    return res.redirect(`${client}/dashboard`);
  }
}